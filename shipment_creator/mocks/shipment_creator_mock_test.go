// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package shipment_creator

//go:generate minimock -i github.com/zcolleen/shipper/shipment_creator.ShipmentCreator -o shipment_creator_mock_test.go -n ShipmentCreatorMock -p shipment_creator

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_shipment_creator "github.com/zcolleen/shipper/shipment_creator"
)

// ShipmentCreatorMock implements mm_shipment_creator.ShipmentCreator
type ShipmentCreatorMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateShipment          func() (sp1 *mm_shipment_creator.Shipment, err error)
	funcCreateShipmentOrigin    string
	inspectFuncCreateShipment   func()
	afterCreateShipmentCounter  uint64
	beforeCreateShipmentCounter uint64
	CreateShipmentMock          mShipmentCreatorMockCreateShipment
}

// NewShipmentCreatorMock returns a mock for mm_shipment_creator.ShipmentCreator
func NewShipmentCreatorMock(t minimock.Tester) *ShipmentCreatorMock {
	m := &ShipmentCreatorMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateShipmentMock = mShipmentCreatorMockCreateShipment{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mShipmentCreatorMockCreateShipment struct {
	optional           bool
	mock               *ShipmentCreatorMock
	defaultExpectation *ShipmentCreatorMockCreateShipmentExpectation
	expectations       []*ShipmentCreatorMockCreateShipmentExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ShipmentCreatorMockCreateShipmentExpectation specifies expectation struct of the ShipmentCreator.CreateShipment
type ShipmentCreatorMockCreateShipmentExpectation struct {
	mock *ShipmentCreatorMock

	results      *ShipmentCreatorMockCreateShipmentResults
	returnOrigin string
	Counter      uint64
}

// ShipmentCreatorMockCreateShipmentResults contains results of the ShipmentCreator.CreateShipment
type ShipmentCreatorMockCreateShipmentResults struct {
	sp1 *mm_shipment_creator.Shipment
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateShipment *mShipmentCreatorMockCreateShipment) Optional() *mShipmentCreatorMockCreateShipment {
	mmCreateShipment.optional = true
	return mmCreateShipment
}

// Expect sets up expected params for ShipmentCreator.CreateShipment
func (mmCreateShipment *mShipmentCreatorMockCreateShipment) Expect() *mShipmentCreatorMockCreateShipment {
	if mmCreateShipment.mock.funcCreateShipment != nil {
		mmCreateShipment.mock.t.Fatalf("ShipmentCreatorMock.CreateShipment mock is already set by Set")
	}

	if mmCreateShipment.defaultExpectation == nil {
		mmCreateShipment.defaultExpectation = &ShipmentCreatorMockCreateShipmentExpectation{}
	}

	return mmCreateShipment
}

// Inspect accepts an inspector function that has same arguments as the ShipmentCreator.CreateShipment
func (mmCreateShipment *mShipmentCreatorMockCreateShipment) Inspect(f func()) *mShipmentCreatorMockCreateShipment {
	if mmCreateShipment.mock.inspectFuncCreateShipment != nil {
		mmCreateShipment.mock.t.Fatalf("Inspect function is already set for ShipmentCreatorMock.CreateShipment")
	}

	mmCreateShipment.mock.inspectFuncCreateShipment = f

	return mmCreateShipment
}

// Return sets up results that will be returned by ShipmentCreator.CreateShipment
func (mmCreateShipment *mShipmentCreatorMockCreateShipment) Return(sp1 *mm_shipment_creator.Shipment, err error) *ShipmentCreatorMock {
	if mmCreateShipment.mock.funcCreateShipment != nil {
		mmCreateShipment.mock.t.Fatalf("ShipmentCreatorMock.CreateShipment mock is already set by Set")
	}

	if mmCreateShipment.defaultExpectation == nil {
		mmCreateShipment.defaultExpectation = &ShipmentCreatorMockCreateShipmentExpectation{mock: mmCreateShipment.mock}
	}
	mmCreateShipment.defaultExpectation.results = &ShipmentCreatorMockCreateShipmentResults{sp1, err}
	mmCreateShipment.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateShipment.mock
}

// Set uses given function f to mock the ShipmentCreator.CreateShipment method
func (mmCreateShipment *mShipmentCreatorMockCreateShipment) Set(f func() (sp1 *mm_shipment_creator.Shipment, err error)) *ShipmentCreatorMock {
	if mmCreateShipment.defaultExpectation != nil {
		mmCreateShipment.mock.t.Fatalf("Default expectation is already set for the ShipmentCreator.CreateShipment method")
	}

	if len(mmCreateShipment.expectations) > 0 {
		mmCreateShipment.mock.t.Fatalf("Some expectations are already set for the ShipmentCreator.CreateShipment method")
	}

	mmCreateShipment.mock.funcCreateShipment = f
	mmCreateShipment.mock.funcCreateShipmentOrigin = minimock.CallerInfo(1)
	return mmCreateShipment.mock
}

// Times sets number of times ShipmentCreator.CreateShipment should be invoked
func (mmCreateShipment *mShipmentCreatorMockCreateShipment) Times(n uint64) *mShipmentCreatorMockCreateShipment {
	if n == 0 {
		mmCreateShipment.mock.t.Fatalf("Times of ShipmentCreatorMock.CreateShipment mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateShipment.expectedInvocations, n)
	mmCreateShipment.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateShipment
}

func (mmCreateShipment *mShipmentCreatorMockCreateShipment) invocationsDone() bool {
	if len(mmCreateShipment.expectations) == 0 && mmCreateShipment.defaultExpectation == nil && mmCreateShipment.mock.funcCreateShipment == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateShipment.mock.afterCreateShipmentCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateShipment.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateShipment implements mm_shipment_creator.ShipmentCreator
func (mmCreateShipment *ShipmentCreatorMock) CreateShipment() (sp1 *mm_shipment_creator.Shipment, err error) {
	mm_atomic.AddUint64(&mmCreateShipment.beforeCreateShipmentCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateShipment.afterCreateShipmentCounter, 1)

	mmCreateShipment.t.Helper()

	if mmCreateShipment.inspectFuncCreateShipment != nil {
		mmCreateShipment.inspectFuncCreateShipment()
	}

	if mmCreateShipment.CreateShipmentMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateShipment.CreateShipmentMock.defaultExpectation.Counter, 1)

		mm_results := mmCreateShipment.CreateShipmentMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateShipment.t.Fatal("No results are set for the ShipmentCreatorMock.CreateShipment")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmCreateShipment.funcCreateShipment != nil {
		return mmCreateShipment.funcCreateShipment()
	}
	mmCreateShipment.t.Fatalf("Unexpected call to ShipmentCreatorMock.CreateShipment.")
	return
}

// CreateShipmentAfterCounter returns a count of finished ShipmentCreatorMock.CreateShipment invocations
func (mmCreateShipment *ShipmentCreatorMock) CreateShipmentAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateShipment.afterCreateShipmentCounter)
}

// CreateShipmentBeforeCounter returns a count of ShipmentCreatorMock.CreateShipment invocations
func (mmCreateShipment *ShipmentCreatorMock) CreateShipmentBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateShipment.beforeCreateShipmentCounter)
}

// MinimockCreateShipmentDone returns true if the count of the CreateShipment invocations corresponds
// the number of defined expectations
func (m *ShipmentCreatorMock) MinimockCreateShipmentDone() bool {
	if m.CreateShipmentMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateShipmentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateShipmentMock.invocationsDone()
}

// MinimockCreateShipmentInspect logs each unmet expectation
func (m *ShipmentCreatorMock) MinimockCreateShipmentInspect() {
	for _, e := range m.CreateShipmentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to ShipmentCreatorMock.CreateShipment")
		}
	}

	afterCreateShipmentCounter := mm_atomic.LoadUint64(&m.afterCreateShipmentCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateShipmentMock.defaultExpectation != nil && afterCreateShipmentCounter < 1 {
		m.t.Errorf("Expected call to ShipmentCreatorMock.CreateShipment at\n%s", m.CreateShipmentMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateShipment != nil && afterCreateShipmentCounter < 1 {
		m.t.Errorf("Expected call to ShipmentCreatorMock.CreateShipment at\n%s", m.funcCreateShipmentOrigin)
	}

	if !m.CreateShipmentMock.invocationsDone() && afterCreateShipmentCounter > 0 {
		m.t.Errorf("Expected %d calls to ShipmentCreatorMock.CreateShipment at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateShipmentMock.expectedInvocations), m.CreateShipmentMock.expectedInvocationsOrigin, afterCreateShipmentCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ShipmentCreatorMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateShipmentInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ShipmentCreatorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ShipmentCreatorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateShipmentDone()
}
