// Code generated by mockery v2.45.1. DO NOT EDIT.

package shipment_creator

import (
	mock "github.com/stretchr/testify/mock"
	shipment_creator "github.com/zcolleen/shipper/shipment_creator"
)

// MockMockeryShipmentCreator is an autogenerated mock type for the ShipmentCreator type
type MockMockeryShipmentCreator struct {
	mock.Mock
}

type MockMockeryShipmentCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMockeryShipmentCreator) EXPECT() *MockMockeryShipmentCreator_Expecter {
	return &MockMockeryShipmentCreator_Expecter{mock: &_m.Mock}
}

// CreateShipment provides a mock function with given fields:
func (_m *MockMockeryShipmentCreator) CreateShipment() (*shipment_creator.Shipment, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateShipment")
	}

	var r0 *shipment_creator.Shipment
	var r1 error
	if rf, ok := ret.Get(0).(func() (*shipment_creator.Shipment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *shipment_creator.Shipment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shipment_creator.Shipment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMockeryShipmentCreator_CreateShipment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShipment'
type MockMockeryShipmentCreator_CreateShipment_Call struct {
	*mock.Call
}

// CreateShipment is a helper method to define mock.On call
func (_e *MockMockeryShipmentCreator_Expecter) CreateShipment() *MockMockeryShipmentCreator_CreateShipment_Call {
	return &MockMockeryShipmentCreator_CreateShipment_Call{Call: _e.mock.On("CreateShipment")}
}

func (_c *MockMockeryShipmentCreator_CreateShipment_Call) Run(run func()) *MockMockeryShipmentCreator_CreateShipment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMockeryShipmentCreator_CreateShipment_Call) Return(_a0 *shipment_creator.Shipment, _a1 error) *MockMockeryShipmentCreator_CreateShipment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMockeryShipmentCreator_CreateShipment_Call) RunAndReturn(run func() (*shipment_creator.Shipment, error)) *MockMockeryShipmentCreator_CreateShipment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMockeryShipmentCreator creates a new instance of MockMockeryShipmentCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMockeryShipmentCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMockeryShipmentCreator {
	mock := &MockMockeryShipmentCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
