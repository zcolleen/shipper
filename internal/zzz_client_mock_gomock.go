// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zcolleen/redis (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -typed -package internal -destination zzz_client_mock_gomock.go github.com/zcolleen/redis Client
//

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockClient) Get(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientMockRecorder) Get(arg0 any) *MockClientGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), arg0)
	return &MockClientGetCall{Call: call}
}

// MockClientGetCall wrap *gomock.Call
type MockClientGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientGetCall) Return(arg0 string, arg1 error) *MockClientGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientGetCall) Do(f func(string) (string, error)) *MockClientGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientGetCall) DoAndReturn(f func(string) (string, error)) *MockClientGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Set mocks base method.
func (m *MockClient) Set(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockClientMockRecorder) Set(arg0, arg1 any) *MockClientSetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockClient)(nil).Set), arg0, arg1)
	return &MockClientSetCall{Call: call}
}

// MockClientSetCall wrap *gomock.Call
type MockClientSetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientSetCall) Return(arg0 error) *MockClientSetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientSetCall) Do(f func(string, string) error) *MockClientSetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientSetCall) DoAndReturn(f func(string, string) error) *MockClientSetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
