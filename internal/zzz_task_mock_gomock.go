// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zcolleen/shipper/internal (interfaces: Task)
//
// Generated by this command:
//
//	mockgen -mock_names Task=MockTaskGomock -typed -package internal -destination zzz_task_mock_gomock.go github.com/zcolleen/shipper/internal Task
//

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTaskGomock is a mock of Task interface.
type MockTaskGomock struct {
	ctrl     *gomock.Controller
	recorder *MockTaskGomockMockRecorder
}

// MockTaskGomockMockRecorder is the mock recorder for MockTaskGomock.
type MockTaskGomockMockRecorder struct {
	mock *MockTaskGomock
}

// NewMockTaskGomock creates a new mock instance.
func NewMockTaskGomock(ctrl *gomock.Controller) *MockTaskGomock {
	mock := &MockTaskGomock{ctrl: ctrl}
	mock.recorder = &MockTaskGomockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskGomock) EXPECT() *MockTaskGomockMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockTaskGomock) Apply() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Apply")
}

// Apply indicates an expected call of Apply.
func (mr *MockTaskGomockMockRecorder) Apply() *MockTaskGomockApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockTaskGomock)(nil).Apply))
	return &MockTaskGomockApplyCall{Call: call}
}

// MockTaskGomockApplyCall wrap *gomock.Call
type MockTaskGomockApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskGomockApplyCall) Return() *MockTaskGomockApplyCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskGomockApplyCall) Do(f func()) *MockTaskGomockApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskGomockApplyCall) DoAndReturn(f func()) *MockTaskGomockApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
