// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zcolleen/shipper/internal (interfaces: UserStore)
//
// Generated by this command:
//
//	mockgen -mock_names UserStore=MockUserStoreGomock -typed -package internal -destination zzz_user_store_mock_gomock.go github.com/zcolleen/shipper/internal UserStore
//

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserStoreGomock is a mock of UserStore interface.
type MockUserStoreGomock struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreGomockMockRecorder
}

// MockUserStoreGomockMockRecorder is the mock recorder for MockUserStoreGomock.
type MockUserStoreGomockMockRecorder struct {
	mock *MockUserStoreGomock
}

// NewMockUserStoreGomock creates a new mock instance.
func NewMockUserStoreGomock(ctrl *gomock.Controller) *MockUserStoreGomock {
	mock := &MockUserStoreGomock{ctrl: ctrl}
	mock.recorder = &MockUserStoreGomockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStoreGomock) EXPECT() *MockUserStoreGomockMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockUserStoreGomock) GetUser(arg0 int64) (User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserStoreGomockMockRecorder) GetUser(arg0 any) *MockUserStoreGomockGetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserStoreGomock)(nil).GetUser), arg0)
	return &MockUserStoreGomockGetUserCall{Call: call}
}

// MockUserStoreGomockGetUserCall wrap *gomock.Call
type MockUserStoreGomockGetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserStoreGomockGetUserCall) Return(arg0 User, arg1 error) *MockUserStoreGomockGetUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserStoreGomockGetUserCall) Do(f func(int64) (User, error)) *MockUserStoreGomockGetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserStoreGomockGetUserCall) DoAndReturn(f func(int64) (User, error)) *MockUserStoreGomockGetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
