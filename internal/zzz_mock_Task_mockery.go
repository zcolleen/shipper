// Code generated by mockery v2.45.1. DO NOT EDIT.

package internal

import mock "github.com/stretchr/testify/mock"

// MockTask is an autogenerated mock type for the Task type
type MockTask struct {
	mock.Mock
}

type MockTask_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTask) EXPECT() *MockTask_Expecter {
	return &MockTask_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields:
func (_m *MockTask) Apply() {
	_m.Called()
}

// MockTask_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type MockTask_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
func (_e *MockTask_Expecter) Apply() *MockTask_Apply_Call {
	return &MockTask_Apply_Call{Call: _e.mock.On("Apply")}
}

func (_c *MockTask_Apply_Call) Run(run func()) *MockTask_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTask_Apply_Call) Return() *MockTask_Apply_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTask_Apply_Call) RunAndReturn(run func()) *MockTask_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTask creates a new instance of MockTask. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTask(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTask {
	mock := &MockTask{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
