// Code generated by mockery v2.45.1. DO NOT EDIT.

package internal

import mock "github.com/stretchr/testify/mock"

// MockhistoryLogger is an autogenerated mock type for the historyLogger type
type MockhistoryLogger struct {
	mock.Mock
}

type MockhistoryLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockhistoryLogger) EXPECT() *MockhistoryLogger_Expecter {
	return &MockhistoryLogger_Expecter{mock: &_m.Mock}
}

// Log provides a mock function with given fields: s
func (_m *MockhistoryLogger) Log(s *Shipment) error {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*Shipment) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockhistoryLogger_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockhistoryLogger_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - s *Shipment
func (_e *MockhistoryLogger_Expecter) Log(s interface{}) *MockhistoryLogger_Log_Call {
	return &MockhistoryLogger_Log_Call{Call: _e.mock.On("Log", s)}
}

func (_c *MockhistoryLogger_Log_Call) Run(run func(s *Shipment)) *MockhistoryLogger_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Shipment))
	})
	return _c
}

func (_c *MockhistoryLogger_Log_Call) Return(_a0 error) *MockhistoryLogger_Log_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockhistoryLogger_Log_Call) RunAndReturn(run func(*Shipment) error) *MockhistoryLogger_Log_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockhistoryLogger creates a new instance of MockhistoryLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockhistoryLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockhistoryLogger {
	mock := &MockhistoryLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
