// Code generated by mockery v2.45.1. DO NOT EDIT.

package internal

import mock "github.com/stretchr/testify/mock"

// MockUserStore is an autogenerated mock type for the UserStore type
type MockUserStore struct {
	mock.Mock
}

type MockUserStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserStore) EXPECT() *MockUserStore_Expecter {
	return &MockUserStore_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields: id
func (_m *MockUserStore) GetUser(id int64) (User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserStore_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - id int64
func (_e *MockUserStore_Expecter) GetUser(id interface{}) *MockUserStore_GetUser_Call {
	return &MockUserStore_GetUser_Call{Call: _e.mock.On("GetUser", id)}
}

func (_c *MockUserStore_GetUser_Call) Run(run func(id int64)) *MockUserStore_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockUserStore_GetUser_Call) Return(_a0 User, _a1 error) *MockUserStore_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserStore_GetUser_Call) RunAndReturn(run func(int64) (User, error)) *MockUserStore_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserStore creates a new instance of MockUserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserStore {
	mock := &MockUserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
